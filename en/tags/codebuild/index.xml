<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeBuild on GrandtechCloud Service Blog</title>
    <link>https://gcssys.github.io/en/tags/codebuild/</link>
    <description>Recent content in CodeBuild on GrandtechCloud Service Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 03 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://gcssys.github.io/en/tags/codebuild/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS CodeBuild - Create Your Windows DockerImage</title>
      <link>https://gcssys.github.io/en/blog/aws-codebuild-%E5%BB%BA%E7%AB%8Bwindows%E4%B8%BB%E6%A9%9F%E7%9A%84dockerimage/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gcssys.github.io/en/blog/aws-codebuild-%E5%BB%BA%E7%AB%8Bwindows%E4%B8%BB%E6%A9%9F%E7%9A%84dockerimage/</guid>
      <description>If you want to build .Net with AWS CodeBuild Windows Server, or some C# Framework, sometimes you will encounter problems with native compilation that cannot be compiled properly. You should create your own Docker Image.
Instructions Environment: Use a host or virtual machine or a direct EC2 (Windows Sever 2016 with Containers). At least 60GB of space is recommended for t2. Medium or higher. The build image will be better. The following is directly through EC2.</description>
    </item>
    
    <item>
      <title>DotNet CI/CD 專案無法編譯處理</title>
      <link>https://gcssys.github.io/en/blog/dotnet-ci-cd-%E5%B0%88%E6%A1%88%E7%84%A1%E6%B3%95%E7%B7%A8%E8%AD%AF%E8%99%95%E7%90%86/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gcssys.github.io/en/blog/dotnet-ci-cd-%E5%B0%88%E6%A1%88%E7%84%A1%E6%B3%95%E7%B7%A8%E8%AD%AF%E8%99%95%E7%90%86/</guid>
      <description>有客戶專案想導入CI/CD, 專案的網頁SourceCode是用DotNet Web製作, 因為客戶也還沒使用版控, 這邊就介紹他使用了Github, 順便教學了一下Git的使用。
這邊第一個想選用的是TravisCI, 因為直接與Github對接, 也方便客戶使用 不過測試從客戶那邊取得的測試程式碼, 一測試就遭遇悲劇&amp;hellip; 因為Travis是用Linux Container來Build專案, 但對C#的支援有限, 尤其是使用到Windows的許多Framework, 測到這邊只能放棄TravisCI。
再來有找到一款有提供Windows主機做CI的Saas服務, Appveyor, 對C#支援性提高許多, 我一放入測試專案測試就編譯成功了！ 後續跟客戶拿了第二包程式碼進行測試, 因為真的有放入一些商業用途的程式碼, 編譯了又出現缺少東西的問題&amp;hellip;只好再換下一個&amp;hellip;
最後使用了AWS的CodeBuild, 有提供Windows的主機, 不過也遇到無法正常編譯的問題, 但AWS有提供自製docker image的選項, 所以這邊就研究了一下怎麼建立配合客戶專案的Image, 詳細可以看這邊({% post_link AWS-CodeBuild-建立Windows主機的DockerImage 建立客製化Image %}), 透過直接幫客戶建置了必須的環境, 這塊才算安然度過&amp;hellip; 不過解決了第二包程式碼之後, 正式專案接入後, 又遭遇到問題囉, 因為客戶先前其實只有一個人在開發, 所以其實專案相依性上沒有控制得很好, 一放上雲端後有各種的missing refence問題, 這邊好像沒啥好方式, 只能跟客戶一起手把手訂下一些規範, 然後幫忙處理一下專案的問題&amp;hellip;
經過了這些努力, 把客戶的CI/CD最難過的一關解決了, 也能開始後續的自動部署部分。</description>
    </item>
    
  </channel>
</rss>